// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// byRccpCpp
Rcpp::List byRccpCpp(const int nr, const arma::mat frommat, arma::mat totmat, arma::mat summat, arma::mat minmat, arma::mat maxmat);
RcppExport SEXP gjam_byRccpCpp(SEXP nrSEXP, SEXP frommatSEXP, SEXP totmatSEXP, SEXP summatSEXP, SEXP minmatSEXP, SEXP maxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type frommat(frommatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type totmat(totmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type summat(summatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type minmat(minmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type maxmat(maxmatSEXP);
    __result = Rcpp::wrap(byRccpCpp(nr, frommat, totmat, summat, minmat, maxmat));
    return __result;
END_RCPP
}
// conditionalMVNRcppCpp
Rcpp::List conditionalMVNRcppCpp(const arma::uvec cdex, const arma::uvec gdex, const arma::mat xx, arma::mat mu, const arma::mat sigma);
RcppExport SEXP gjam_conditionalMVNRcppCpp(SEXP cdexSEXP, SEXP gdexSEXP, SEXP xxSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::uvec >::type cdex(cdexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type gdex(gdexSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(conditionalMVNRcppCpp(cdex, gdex, xx, mu, sigma));
    return __result;
END_RCPP
}
// tnormCpp
double tnormCpp(double lo, double hi, double mu, double sig);
RcppExport SEXP gjam_tnormCpp(SEXP loSEXP, SEXP hiSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type lo(loSEXP);
    Rcpp::traits::input_parameter< double >::type hi(hiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    __result = Rcpp::wrap(tnormCpp(lo, hi, mu, sig));
    return __result;
END_RCPP
}
// tnormMVNmatrixRcppCpp
arma::mat tnormMVNmatrixRcppCpp(arma::mat avec, arma::mat muvec, arma::mat smat, arma::mat lo, arma::mat hi, arma::uvec whichSample, arma::uvec idxALL);
RcppExport SEXP gjam_tnormMVNmatrixRcppCpp(SEXP avecSEXP, SEXP muvecSEXP, SEXP smatSEXP, SEXP loSEXP, SEXP hiSEXP, SEXP whichSampleSEXP, SEXP idxALLSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type muvec(muvecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type smat(smatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lo(loSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hi(hiSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type whichSample(whichSampleSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idxALL(idxALLSEXP);
    __result = Rcpp::wrap(tnormMVNmatrixRcppCpp(avec, muvec, smat, lo, hi, whichSample, idxALL));
    return __result;
END_RCPP
}
